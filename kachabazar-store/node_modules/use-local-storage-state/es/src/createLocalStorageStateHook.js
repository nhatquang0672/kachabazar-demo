import { unstable_batchedUpdates } from 'react-dom';
import { useCallback, useEffect, useMemo } from 'react';
import useLocalStorageStateBase from './useLocalStorageStateBase';
export default function createLocalStorageStateHook(key, defaultValue) {
    const setValueFunctions = [];
    const removeItemFunctions = [];
    return function useLocalStorageStateHook() {
        const [value, setValue, { isPersistent, removeItem }] = useLocalStorageStateBase(key, defaultValue);
        const setValueAll = useCallback((newValue) => {
            unstable_batchedUpdates(() => {
                for (const setValueFunction of setValueFunctions) {
                    setValueFunction(newValue);
                }
            });
        }, []);
        useEffect(() => {
            setValueFunctions.push(setValue);
            removeItemFunctions.push(removeItem);
            return () => {
                setValueFunctions.splice(setValueFunctions.indexOf(setValue), 1);
                removeItemFunctions.splice(removeItemFunctions.indexOf(removeItem), 1);
            };
        }, [setValue, removeItem]);
        return useMemo(() => [
            value,
            setValueAll,
            {
                isPersistent,
                removeItem() {
                    for (const removeItemFunction of removeItemFunctions) {
                        removeItemFunction();
                    }
                },
            },
        ], [value, setValueAll, isPersistent]);
    };
}
